<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.kyripay_tr</groupId>
	<artifactId>payment-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>payment-service</name>
	<description>Payment service for Kyripay application</description>

	<properties>
		<java.version>1.8</java.version>
		<swagger.version>2.9.2</swagger.version>
		<rest-assured.version>3.1.0</rest-assured.version>
		<spring-restdocs.version>2.0.1.RELEASE</spring-restdocs.version>
		<spring-cloud.version>Greenwich.SR1</spring-cloud.version>
		<asciidoctor-maven-plugin.version>1.5.6</asciidoctor-maven-plugin.version>
		<jooq.version>3.11.11</jooq.version>
		<postgresql.driver.version>42.2.5</postgresql.driver.version>
		<dozer.version>5.3.1</dozer.version>
		<testcontainers.version>1.11.3</testcontainers.version>
		<rider-core.version>1.7.2</rider-core.version>
		<wiremock.version>2.25.0</wiremock.version>

		<!-- Sonar -->
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.jacoco.reportPaths>${project.basedir}/target/jacoco-unit.exec,${project.basedir}/target/jacoco-api.exec,${project.basedir}/target/jacoco-integration.exec</sonar.jacoco.reportPaths>
		<sonar.language>java</sonar.language>

		<schema.name>public</schema.name>
		<jdbc.user>payments_ms_user</jdbc.user>
		<jdbc.password>12345</jdbc.password>
		<jdbc.driver>org.postgresql.Driver</jdbc.driver>
		<jooq.database>org.jooq.meta.postgres.PostgresDatabase</jooq.database>
		<flyway.locations>filesystem:src/main/resources/db/migration/tables,filesystem:src/main/resources/db/migration/data</flyway.locations>
		<jdbc.url>jdbc:postgresql://localhost:5432/payments_ms</jdbc.url>

		<jacoco-maven-plugin.version>0.8.4</jacoco-maven-plugin.version>
		<dockerfile-maven-plugin.version>1.4.12</dockerfile-maven-plugin.version>
		<asciidoctor-maven-plugin.version>1.5.6</asciidoctor-maven-plugin.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>

		<dependency>
			<groupId>io.opentracing.contrib</groupId>
			<artifactId>opentracing-spring-web-autoconfigure</artifactId>
			<version>0.3.2</version>
		</dependency>

		<dependency>
			<groupId>net.sf.dozer</groupId>
			<artifactId>dozer</artifactId>
			<version>${dozer.version}</version>
		</dependency>


		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>


		<!-- Swagger Documentation -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${swagger.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${swagger.version}</version>
		</dependency>

		<!-- Spring REST Docs Documentation -->
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-restassured</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq</artifactId>
			<version>${jooq.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-meta</artifactId>
			<version>${jooq.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-codegen</artifactId>
			<version>${jooq.version}</version>
		</dependency>

		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgresql.driver.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Test Dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<version>${rest-assured.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.database-rider</groupId>
			<artifactId>rider-core</artifactId>
			<version>${rider-core.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.database-rider</groupId>
			<artifactId>rider-spring</artifactId>
			<version>${rider-core.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.github.tomakehurst</groupId>
			<artifactId>wiremock</artifactId>
			<version>${wiremock.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<generatedSourcesDirectory>${project.build.directory}/generated-sources/jooq</generatedSourcesDirectory>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<destFile>${project.build.directory}/jacoco-unit.exec</destFile>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<!--Run unit tests only-->
					<excludes>
						<exclude>../api/*Test.java</exclude>
						<exclude>../integration/*Test.java</exclude>
					</excludes>
					<includes>
						<include>../unit/*Test.java</include>
					</includes>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>

        <profile>
            <id>generate-jooq-sources</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.31.0</version>
                        <executions>
                            <execution>
                                <id>prepare-db-for-jooq-codegen</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>postgres:9.6.12</name>
                                            <alias>postgres_payments_ms</alias>
                                            <run>
                                                <ports>
                                                    <port>5432:5432</port>
                                                </ports>
                                                <env>
                                                    <POSTGRES_USER>payments_ms_user</POSTGRES_USER>
                                                    <POSTGRES_PASSWORD>12345</POSTGRES_PASSWORD>
                                                    <POSTGRES_DB>payments_ms</POSTGRES_DB>
                                                </env>
                                                <wait>
                                                    <log>(?s)database system is ready to accept connections.*database system is ready to accept connections</log>
                                                    <exec>
                                                        <postStart>pg_isready -h localhost -p 5432</postStart>
                                                        <breakOnError>true</breakOnError>
                                                    </exec>
                                                </wait>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>remove-db-for-jooq-codegen</id>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                                <phase>process-sources</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.flywaydb</groupId>
                        <artifactId>flyway-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>migrate</goal>
                                </goals>
                            </execution>
                        </executions>

                        <configuration>
                            <driver>${jdbc.driver}</driver>
                            <url>${jdbc.url}</url>
                            <user>${jdbc.user}</user>
                            <password>${jdbc.password}</password>
                            <schemas>${schema.name}</schemas>
                            <ignoreMissingMigrations>true</ignoreMissingMigrations>
                            <locations>
                                <location>${flyway.locations}</location>
                            </locations>
                            <placeholders>
                                <schemaName>${schema.name}</schemaName>
                            </placeholders>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.jooq</groupId>
                        <artifactId>jooq-codegen-maven</artifactId>
                        <version>${jooq.version}</version>
                        <executions>
                            <execution>
                                <id>jooq-codegen</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                            </execution>
                        </executions>

                        <configuration>
                            <jdbc>
                                <driver>${jdbc.driver}</driver>
                                <url>${jdbc.url}</url>
                                <user>${jdbc.user}</user>
                                <password>${jdbc.password}</password>
                            </jdbc>
                            <generator>
                                <database>
                                    <name>${jooq.database}</name>
                                    <includes>.*</includes>
                                    <excludes></excludes>
                                    <inputSchema>${schema.name}</inputSchema>
                                </database>
                                <target>
                                    <packageName>com.kyripay.payment.dao.impl.jooq.meta</packageName>
                                    <directory>target/generated-sources/jooq</directory>
                                </target>
                            </generator>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<profile>
			<id>api</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!--Run api tests only-->
							<excludes>
								<exclude>../unit/*Test.java</exclude>
								<exclude>../integration/*Test.java</exclude>
							</excludes>
							<includes>
								<include>../api/*Test.java</include>
							</includes>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-maven-plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<destFile>${project.build.directory}/jacoco-api.exec</destFile>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>integration</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!--Run integration tests only-->
							<excludes>
								<exclude>../unit/*Test.java</exclude>
								<exclude>../api/*Test.java</exclude>
							</excludes>
							<includes>
								<include>../integration/*Test.java</include>
							</includes>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-maven-plugin.version}</version>
						<executions>
							<execution>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>report</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<destFile>${project.build.directory}/jacoco-integration.exec</destFile>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

        <profile>
            <id>restdocs</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctor-maven-plugin</artifactId>
                        <version>${asciidoctor-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>generate-docs</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>process-asciidoc</goal>
                                </goals>
                                <configuration>
                                    <backend>html</backend>
                                    <doctype>book</doctype>

                                    <attributes>
                                        <snippets>${project.build.directory}/generated-snippets</snippets>
                                    </attributes>

                                    <sourceDirectory>src/main/asciidoc</sourceDirectory>
                                    <outputDirectory>target/generated-docs</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.springframework.restdocs</groupId>
                                <artifactId>spring-restdocs-asciidoctor</artifactId>
                                <version>${spring-restdocs.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <!--Dont's run any tests-->
                            <excludes>
                                <exclude>../unit/*Test.java</exclude>
                                <exclude>../integration/*Test.java</exclude>
                                <exclude>../api/*Test.java</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<profile>
			<id>docker</id>
			<properties>
				<docker.image.prefix>kyripay</docker.image.prefix>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${dockerfile-maven-plugin.version}</version>
						<!-- Wire up to the default build phases -->
						<executions>
							<execution>
								<id>default</id>
								<goals>
									<goal>build</goal>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<repository>${docker.image.prefix}/${project.artifactId}</repository>
							<buildArgs>
								<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
							</buildArgs>
						</configuration>
						<dependencies>
							<!-- To make this work on JDK 9+ -->
							<dependency>
								<groupId>javax.activation</groupId>
								<artifactId>javax.activation-api</artifactId>
								<version>1.2.0</version>
							</dependency>
						</dependencies>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!--Don't run any tests-->
							<excludes>
								<exclude>../unit/*Test.java</exclude>
								<exclude>../api/*Test.java</exclude>
								<exclude>../integration/*Test.java</exclude>
							</excludes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>

</project>
